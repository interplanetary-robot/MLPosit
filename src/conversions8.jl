function breakdown(x::Float64)
    x_neg  = (reinterpret(UInt64, x) & 0x8000_0000_0000_0000) != 0
    x_bits = reinterpret(UInt64, x) & 0x7FFF_FFFF_FFFF_FFFF

    x_exp = Int16(((x_bits >> 52) + 1025) & 0x07FF)
    x_exp = Int16((x_exp > 1024) ? (x_exp - 2048) : x_exp)
    x_frc = UInt16((x_bits & 0x000F_FFFF_FFFF_FFFF) >> 39)

    return (x_neg, x_exp, x_frc)
end

function assemble(x_exp::Int16, x_frc::UInt16)
    if x_exp >= 0
        (reinterpret(Int16, 0xC000 | x_frc) >> x_exp) & 0x7FFF
    else #x_exp < 0
        (0x2000 | x_frc) >> (-x_exp - 1)
    end
end

function finishing(u16val::UInt16)
    #finishing step: returns the truncated value, the guard bit, and the round
    trunc = UInt8(u16val >> 8)
    round = Bool(trunc & 0x01)
    guard = (u16val & 0x0080) != 0
    resid = (u16val & 0x007F) != 0

    return (trunc, round, guard, resid)
end

function Base.convert(::Type{P}, x::Float64) where P <: Posit{8}
    override = false
    override_val = zero(UInt8)

    nan_override = isnan(x)
    override |= nan_override
    override_val = POSIT8_NAN * nan_override

    zer_override = iszero(x)
    override |= zer_override

    (x_neg, x_exp, x_frc) = breakdown(x)

    of_override = x_exp > Int16(8)
    override |= of_override
    override_val = POSIT8_MAXPOS * of_override

    uf_override = x_exp < Int16(-8)
    override |= uf_override
    override_val = POSIT8_MINPOS * uf_override

    u16val = assemble(x_exp, x_frc)

    u16val = x_neg ? -u16val : u16val
    #u16val *= one(UInt16) - UInt16(2) * x_neg

    (trunc, round, guard, resid) = finishing(u16val)
    #round to nearest zero

    u8val = trunc + ((round | resid) & guard)

    u8val = (u8val * !override) | (u8val * override)

    p(u8val, P)
end

function convert_with_branches(x::Float64, ::Type{P}) where P <: Posit{8}

    isnan(x) && return nan(P)
    iszero(x) && return zero(P)

    (x_neg, x_exp, x_frc) = breakdown(x)

    (x_exp > Int16(8)) && return reinterpret(Posit8, x_neg ? -POSIT8_MAXPOS : POSIT8_MAXPOS)
    (x_exp < Int16(-8)) && return reinterpret(Posit8, x_neg ? -POSIT8_MINPOS : POSIT8_MINPOS)

    u16val = assemble(x_exp, x_frc)

    u16val = x_neg ? -u16val : u16val
    (trunc, round, guard, resid) = finishing(u16val)
    #round to nearest zero

    u8val = trunc + ((round | resid) & guard)

    p(u8val, P)
end

# an artisanal, hand-crafted lookup table.
const __posit_lookuptable64 = [
  0.0,       #= 0b0000_0000 =# 0.015625,  #= 0b0000_0001 =# 0.03125,   #= 0b0000_0010 =# 0.046875,  #= 0b0000_0011 =# 0.0625,    #= 0b0000_0100 =# 0.078125,  #= 0b0000_0101 =# 0.09375,   #= 0b0000_0110 =# 0.109375,  #= 0b0000_0111 =#
  0.125,     #= 0b0000_1000 =# 0.140625,  #= 0b0000_1001 =# 0.15625,   #= 0b0000_1010 =# 0.171875,  #= 0b0000_1011 =# 0.1875,    #= 0b0000_1100 =# 0.203125,  #= 0b0000_1101 =# 0.21875,   #= 0b0000_1110 =# 0.234375,  #= 0b0000_1111 =#
  0.25,      #= 0b0001_0000 =# 0.265625,  #= 0b0001_0001 =# 0.28125,   #= 0b0001_0010 =# 0.296875,  #= 0b0001_0011 =# 0.3125,    #= 0b0001_0100 =# 0.328125,  #= 0b0001_0101 =# 0.34375,   #= 0b0001_0110 =# 0.359375,  #= 0b0001_0111 =#
  0.375,     #= 0b0001_1000 =# 0.390625,  #= 0b0001_1001 =# 0.40625,   #= 0b0001_1010 =# 0.421875,  #= 0b0001_1011 =# 0.4375,    #= 0b0001_1100 =# 0.453125,  #= 0b0001_1101 =# 0.46875,   #= 0b0001_1110 =# 0.484375,  #= 0b0001_1111 =#
  0.5,       #= 0b0010_0000 =# 0.515625,  #= 0b0010_0001 =# 0.53125,   #= 0b0010_0010 =# 0.546875,  #= 0b0010_0011 =# 0.5625,    #= 0b0010_0100 =# 0.578125,  #= 0b0010_0101 =# 0.59375,   #= 0b0010_0110 =# 0.609375,  #= 0b0010_0111 =#
  0.625,     #= 0b0010_1000 =# 0.640625,  #= 0b0010_1001 =# 0.65625,   #= 0b0010_1010 =# 0.671875,  #= 0b0010_1011 =# 0.6875,    #= 0b0010_1100 =# 0.703125,  #= 0b0010_1101 =# 0.71875,   #= 0b0010_1110 =# 0.734375,  #= 0b0010_1111 =#
  0.75,      #= 0b0011_0000 =# 0.765625,  #= 0b0011_0001 =# 0.78125,   #= 0b0011_0010 =# 0.796875,  #= 0b0011_0011 =# 0.8125,    #= 0b0011_0100 =# 0.828125,  #= 0b0011_0101 =# 0.84375,   #= 0b0011_0110 =# 0.859375,  #= 0b0011_0111 =#
  0.875,     #= 0b0011_1000 =# 0.890625,  #= 0b0011_1001 =# 0.90625,   #= 0b0011_1010 =# 0.921875,  #= 0b0011_1011 =# 0.9375,    #= 0b0011_1100 =# 0.953125,  #= 0b0011_1101 =# 0.96875,   #= 0b0011_1110 =# 0.984375,  #= 0b0011_1111 =#
  1.0,       #= 0b0100_0000 =# 1.03125,   #= 0b0100_0001 =# 1.0625,    #= 0b0100_0010 =# 1.09375,   #= 0b0100_0011 =# 1.125,     #= 0b0100_0100 =# 1.15625,   #= 0b0100_0101 =# 1.1875,    #= 0b0100_0110 =# 1.21875,   #= 0b0100_0111 =#
  1.25,      #= 0b0100_1000 =# 1.28125,   #= 0b0100_1001 =# 1.3125,    #= 0b0100_1010 =# 1.34375,   #= 0b0100_1011 =# 1.375,     #= 0b0100_1100 =# 1.40625,   #= 0b0100_1101 =# 1.4375,    #= 0b0100_1110 =# 1.46875,   #= 0b0100_1111 =#
  1.5,       #= 0b0101_0000 =# 1.53125,   #= 0b0101_0001 =# 1.5625,    #= 0b0101_0010 =# 1.59375,   #= 0b0101_0011 =# 1.625,     #= 0b0101_0100 =# 1.65625,   #= 0b0101_0101 =# 1.6875,    #= 0b0101_0110 =# 1.71875,   #= 0b0101_0111 =#
  1.75,      #= 0b0101_1000 =# 1.78125,   #= 0b0101_1001 =# 1.8125,    #= 0b0101_1010 =# 1.84375,   #= 0b0101_1011 =# 1.875,     #= 0b0101_1100 =# 1.90625,   #= 0b0101_1101 =# 1.9375,    #= 0b0101_1110 =# 1.96875,   #= 0b0101_1111 =#
  2.0,       #= 0b0110_0000 =# 2.125,     #= 0b0110_0001 =# 2.25,      #= 0b0110_0010 =# 2.375,     #= 0b0110_0011 =# 2.5,       #= 0b0110_0100 =# 2.625,     #= 0b0110_0101 =# 2.75,      #= 0b0110_0110 =# 2.875,     #= 0b0110_0111 =#
  3.0,       #= 0b0110_1000 =# 3.125,     #= 0b0110_1001 =# 3.25,      #= 0b0110_1010 =# 3.375,     #= 0b0110_1011 =# 3.5,       #= 0b0110_1100 =# 3.625,     #= 0b0110_1101 =# 3.75,      #= 0b0110_1110 =# 3.875,     #= 0b0110_1111 =#
  4.0,       #= 0b0111_0000 =# 4.5,       #= 0b0111_0001 =# 5.0,       #= 0b0111_0010 =# 5.5,       #= 0b0111_0011 =# 6.0,       #= 0b0111_0100 =# 6.5,       #= 0b0111_0101 =# 7.0,       #= 0b0111_0110 =# 7.5,       #= 0b0111_0111 =#
  8.0,       #= 0b0111_1000 =# 10.0,      #= 0b0111_1001 =# 12.0,      #= 0b0111_1010 =# 14.0,      #= 0b0111_1011 =# 16.0,      #= 0b0111_1100 =# 24.0,      #= 0b0111_1101 =# 32.0,      #= 0b0111_1110 =# 64.0,      #= 0b0111_1111 =#
  NaN,       #= 0b1000_0000 =# -64.0,     #= 0b1000_0001 =# -32.0,     #= 0b1000_0010 =# -24.0,     #= 0b1000_0011 =# -16.0,     #= 0b1000_0100 =# -14.0,     #= 0b1000_0101 =# -12.0,     #= 0b1000_0110 =# -10.0,     #= 0b1000_0111 =#
  -8.0,      #= 0b1000_1000 =# -7.5,      #= 0b1000_1001 =# -7.0,      #= 0b1000_1010 =# -6.5,      #= 0b1000_1011 =# -6.0,      #= 0b1000_1100 =# -5.5,      #= 0b1000_1101 =# -5.0,      #= 0b1000_1110 =# -4.5,      #= 0b1000_1111 =#
  -4.0,      #= 0b1001_0000 =# -3.875,    #= 0b1001_0001 =# -3.75,     #= 0b1001_0010 =# -3.625,    #= 0b1001_0011 =# -3.5,      #= 0b1001_0100 =# -3.375,    #= 0b1001_0101 =# -3.25,     #= 0b1001_0110 =# -3.125,    #= 0b1001_0111 =#
  -3.0,      #= 0b1001_1000 =# -2.875,    #= 0b1001_1001 =# -2.75,     #= 0b1001_1010 =# -2.625,    #= 0b1001_1011 =# -2.5,      #= 0b1001_1100 =# -2.375,    #= 0b1001_1101 =# -2.25,     #= 0b1001_1110 =# -2.125,    #= 0b1001_1111 =#
  -2.0,      #= 0b1010_0000 =# -1.96875,  #= 0b1010_0001 =# -1.9375,   #= 0b1010_0010 =# -1.90625,  #= 0b1010_0011 =# -1.875,    #= 0b1010_0100 =# -1.84375,  #= 0b1010_0101 =# -1.8125,   #= 0b1010_0110 =# -1.78125,  #= 0b1010_0111 =#
  -1.75,     #= 0b1010_1000 =# -1.71875,  #= 0b1010_1001 =# -1.6875,   #= 0b1010_1010 =# -1.65625,  #= 0b1010_1011 =# -1.625,    #= 0b1010_1100 =# -1.59375,  #= 0b1010_1101 =# -1.5625,   #= 0b1010_1110 =# -1.53125,  #= 0b1010_1111 =#
  -1.5,      #= 0b1011_0000 =# -1.46875,  #= 0b1011_0001 =# -1.4375,   #= 0b1011_0010 =# -1.40625,  #= 0b1011_0011 =# -1.375,    #= 0b1011_0100 =# -1.34375,  #= 0b1011_0101 =# -1.3125,   #= 0b1011_0110 =# -1.28125,  #= 0b1011_0111 =#
  -1.25,     #= 0b1011_1000 =# -1.21875,  #= 0b1011_1001 =# -1.1875,   #= 0b1011_1010 =# -1.15625,  #= 0b1011_1011 =# -1.125,    #= 0b1011_1100 =# -1.09375,  #= 0b1011_1101 =# -1.0625,   #= 0b1011_1110 =# -1.03125,  #= 0b1011_1111 =#
  -1.0,      #= 0b1100_0000 =# -0.984375, #= 0b1100_0001 =# -0.96875,  #= 0b1100_0010 =# -0.953125, #= 0b1100_0011 =# -0.9375,   #= 0b1100_0100 =# -0.921875, #= 0b1100_0101 =# -0.90625,  #= 0b1100_0110 =# -0.890625, #= 0b1100_0111 =#
  -0.875,    #= 0b1100_1000 =# -0.859375, #= 0b1100_1001 =# -0.84375,  #= 0b1100_1010 =# -0.828125, #= 0b1100_1011 =# -0.8125,   #= 0b1100_1100 =# -0.796875, #= 0b1100_1101 =# -0.78125,  #= 0b1100_1110 =# -0.765625, #= 0b1100_1111 =#
  -0.75,     #= 0b1101_0000 =# -0.734375, #= 0b1101_0001 =# -0.71875,  #= 0b1101_0010 =# -0.703125, #= 0b1101_0011 =# -0.6875,   #= 0b1101_0100 =# -0.671875, #= 0b1101_0101 =# -0.65625,  #= 0b1101_0110 =# -0.640625, #= 0b1101_0111 =#
  -0.625,    #= 0b1101_1000 =# -0.609375, #= 0b1101_1001 =# -0.59375,  #= 0b1101_1010 =# -0.578125, #= 0b1101_1011 =# -0.5625,   #= 0b1101_1100 =# -0.546875, #= 0b1101_1101 =# -0.53125,  #= 0b1101_1110 =# -0.515625, #= 0b1101_1111 =#
  -0.5,      #= 0b1110_0000 =# -0.484375, #= 0b1110_0001 =# -0.46875,  #= 0b1110_0010 =# -0.453125, #= 0b1110_0011 =# -0.4375,   #= 0b1110_0100 =# -0.421875, #= 0b1110_0101 =# -0.40625,  #= 0b1110_0110 =# -0.390625, #= 0b1110_0111 =#
  -0.375,    #= 0b1110_1000 =# -0.359375, #= 0b1110_1001 =# -0.34375,  #= 0b1110_1010 =# -0.328125, #= 0b1110_1011 =# -0.3125,   #= 0b1110_1100 =# -0.296875, #= 0b1110_1101 =# -0.28125,  #= 0b1110_1110 =# -0.265625, #= 0b1110_1111 =#
  -0.25,     #= 0b1111_0000 =# -0.234375, #= 0b1111_0001 =# -0.21875,  #= 0b1111_0010 =# -0.203125, #= 0b1111_0011 =# -0.1875,   #= 0b1111_0100 =# -0.171875, #= 0b1111_0101 =# -0.15625,  #= 0b1111_0110 =# -0.140625, #= 0b1111_0111 =#
  -0.125,    #= 0b1111_1000 =# -0.109375, #= 0b1111_1001 =# -0.09375,  #= 0b1111_1010 =# -0.078125, #= 0b1111_1011 =# -0.0625,   #= 0b1111_1100 =# -0.046875, #= 0b1111_1101 =# -0.03125,  #= 0b1111_1110 =# -0.015625, #= 0b1111_1111 =#
 ]


function Base.convert(::Type{Float64}, x::Posit{8})
    #use a lookup table for the reversion function.
    __posit_lookuptable64[u(x) + 1]
end

# in new julia, explicit conversions are required
Float64(x::Posit8) = convert(Float64, x)
Posit8(x::Float64) = convert(Posit8, x)

# create a type converter for arrays that automatically does dispatch.
Posit8(a::AbstractArray{T,N}) where T where N = Posit8.(a)
